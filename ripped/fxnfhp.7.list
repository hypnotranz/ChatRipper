> include all fowler patterns
1.  Active Record: An object that wraps a row in a database table, encapsulating the database access and business logic for that row.
2.  Data Mapper: A layer of objects that moves data between objects and a database while keeping them independent of each other and the mapper itself.
3.  Table Data Gateway: An object that acts as an interface between the application code and a database, encapsulating all the database access logic.
4.  Row Data Gateway: An object that acts as an interface between the application code and a database, encapsulating all the database access logic for a single row of a table.
5.  Gateway: An object that provides a simplified interface to a complex subsystem, such as a legacy system or an external service.
6.  Repository: A layer of objects that provides a collection-like interface to a set of domain objects, abstracting the database access and persistence logic.
7.  Identity Map: A cache that stores a mapping between object identities and their corresponding objects, ensuring that each object is represented by only one instance.
8.  Unit of Work: A pattern that tracks all the changes made to a set of objects in a transaction, and persisting them to the database as a single transaction.
9.  Lazy Load: A pattern that defers the loading of an object until it is actually needed, in order to reduce the number of unnecessary database queries.
10.  Value Object: An immutable object that represents a value, such as a date or a currency, and has no identity of its own.
11.  Domain Model: An object-oriented representation of the business domain and its rules, used to encapsulate business logic and enable the application to reflect the business accurately.
12.  Service Layer: A layer of objects that provides a set of services to the application, encapsulating the business logic and providing a simple interface to the application code.
13.  Domain Store: A layer of objects that manages the persistence of domain objects, abstracting the database access and persistence logic.
14.  Transaction Script: A pattern that organizes the business logic around individual transactions, with a script for each transaction that manipulates the data directly.
15.  Domain Table Module: An object that represents a table in a database, with the business logic for that table encapsulated in the object.
16.  Table Module: An object that represents a set of related database tables, with the business logic for those tables encapsulated in the object.
17.  Service Layer with Domain Object: A pattern that combines the Service Layer and Domain Model patterns, with the business logic encapsulated in the domain objects.
18.  Service Layer with Transaction Script: A pattern that combines the Service Layer and Transaction Script patterns, with the transaction scripts encapsulated in the service layer.
19.  Service Layer with Table Module: A pattern that combines the Service Layer and Table Module patterns, with the table modules encapsulating the business logic for a set of related tables.
20.  Service Layer with Domain Table Module: A pattern that combines the Service Layer and Domain Table Module patterns, with the domain table modules encapsulating the business logic for a single table.
21.  Query Object: An object that encapsulates a query on a database, abstracting the query logic and providing a simple interface to the application code.
22.  Repository with Query Object: A pattern that combines the Repository and Query Object patterns, with the query objects encapsulating the query logic and the repositories managing the persistence.
23.  Data Transfer Object: An object that encapsulates a set of related data, used to transfer data between layers of the application or between applications.
24.  Remote Facade: An object that provides a simple interface to a complex subsystem, such as an external service, over a remote interface, such as

